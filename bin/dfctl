#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o pipefail

cd "$(dirname "${BASH_SOURCE[0]}")"
cd ..

full_history=false

usage() {
    cat << USAGE
Dot Files Control

Usage:
  $(basename "$0") install
  $(basename "$0") uninstall
  $(basename "$0") update

Options:
  -h  Show this message.
  -v  Shows the version.
  -a  Pull full history from git
USAGE
}

run-hook() {
    if [ -f "hooks/${1}.sh" ]; then
        printf "running hook $1\n"
        source ./hooks/${1}.sh
    fi
}

install-only() (
    if [ -f "data.lock" ]; then
        printf "already installed: data.lock present\n" 1>&2
        exit 1
    fi

    cd etc
    backup="../backup"
    data="../data.lock"
    for template_file in $(find * .[^.]* -type f 2>/dev/null); do
        target_file="$HOME/$template_file"
        if [ -f "$target_file" ]; then
            if [ $target_file -ef $template_file ]; then
                printf "skipped '%s'\n" "$target_file"
                continue
            fi
            if [ -L $target_file ]; then
                unlink $target_file
                ln $template_file $target_file
                printf "relinked '%s'\n" "$target_file"
                echo $template_file >> $data
                continue
            fi
            mkdir -p $(dirname $backup/$template_file)
            mv $target_file $backup/$template_file
            ln $template_file $target_file
            echo $template_file >> $data
            printf "overwrote '%s'\n" "$target_file"
        else
            mkdir -p $(dirname $target_file)
            ln $template_file $target_file
            echo $template_file >> $data
            printf "linked '%s'\n" "$target_file"
        fi
    done
)

install() {
    if [ -d "backup" ]; then
        printf "already installed: backup folder present\n" 1>&2
        exit 1
    fi

    run-hook install
    install-only
    run-hook post-install
}

uninstall-only() (
    if [ ! -f data.lock ]; then
        if [ -d "backup" ]; then
            printf "backup folder found but no data.lock file found\nthis could be the result of a failed uninstall - please manually clean up.\n" 1>&2
            exit 1
        fi
        printf "no data file found\n" 1>&2
        exit 1
    fi

    cd etc

    while read file; do
        if [ $file = "" ]; then continue; fi
        if [ -f $HOME/$file ]; then
            if [ ! $HOME/$file -ef $file ]; then
                printf "skipped '%s': mismatched file\n" "$file" 1>&2
                continue
            fi
            rm $HOME/$file
            printf "removed '%s'\n" "$file"
        else
            printf "unable to find '%s'\n" "$file" 1>&2
        fi
    done < ../data.lock

    rm ../data.lock
    printf "removed data file\n"
    run-hook uninstall
)

restore-backup() (
    entire=true
    if [ ! -d "backup" ]; then
        printf "skipped backup restore: nothing to do\n"
        return
    fi

    cd backup
    for backup in $(find * .[^.]* -type f 2>/dev/null); do
        target="$HOME/$backup"
        if [ -e $target ]; then
            entire=false
            printf "unable to restore '%s': file kept in place\n" "backup/$backup" 1>&2
            continue
        fi

        mv $backup $target
    done

    if [ $entire != true ]; then
        printf "unable to restore all files successfully. relevant files are in %s and will need to be cleaned up.\n" "$(pwd)" 1>&2
        exit 1
    fi

    printf "restored backup successfully\n"
    cd ..
    rm -r backup/
)

uninstall() {
    uninstall-only
    restore-backup
}


upstream() {
    git remote update &>/dev/null

    upstream=${1:-'@{u}'}
    local=$(git rev-parse @)
    remote=$(git rev-parse "$upstream")
    base=$(git merge-base @ "$upstream")

    if [ "$(git diff --stat)" != "" ]; then
        echo "dirty"
    elif [ $local = $remote ]; then
        echo "up-to-date"
    elif [ $local = $base ]; then
        echo "outdated"
    elif [ $remote = $base ]; then
        echo "newer than source"
    else
        echo "diverged"
    fi
}

update() {
    if [ ! $(upstream) = "outdated" ]; then
        printf "cannot update: current status '%s' is not outdated\n" $(upstream) 1>&2
        exit 1
    fi

    run-hook update
    uninstall-only
    if [ $full_history ]; then
        git pull --ff-only
    else
        git pull --depth=1 --ff-only
    fi
    install-only
    run-hook post-update
}

while getopts ':hv' option; do
    case "${option}" in
        h)
            usage
            exit
            ;;
        v)
            git log --pretty=format:"version %h ($(upstream))%n(%an, %ar) %s" -n 1
            exit
            ;;
        e)
            full_history=true
            ;;
        *)
            printf "illegal option: -%s\n\n" "$OPTARG" 1>&2
            usage >&2
            exit 1
            ;;
    esac
done

case "${1-default}" in
    install)
        install
        ;;
    uninstall)
        uninstall
        ;; 
    update)
        update
        ;;
    *)
        if [ $# -ne 0 ]; then
            printf "illegal argument: %s\n\n" "$1" 1>&2
        fi
        usage
        ;;
esac
